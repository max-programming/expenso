/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as ManagerRouteRouteImport } from './routes/manager/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ManagerApprovalsRouteImport } from './routes/manager/approvals'
import { Route as EmployeesViewRouteImport } from './routes/employees/view'
import { Route as EmployeeExpensesRouteImport } from './routes/employee/expenses'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminCategoriesRouteImport } from './routes/admin/categories'
import { Route as AdminApprovalRulesRouteImport } from './routes/admin/approval-rules'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo/start.api-request'
import { Route as DemoApiNamesRouteImport } from './routes/demo/api.names'
import { Route as ApiAuthSplatRouteImport } from './routes/api.auth.$'
import { Route as DemoStartSsrIndexRouteImport } from './routes/demo/start.ssr.index'
import { Route as DemoStartSsrSpaModeRouteImport } from './routes/demo/start.ssr.spa-mode'
import { Route as DemoStartSsrFullSsrRouteImport } from './routes/demo/start.ssr.full-ssr'
import { Route as DemoStartSsrDataOnlyRouteImport } from './routes/demo/start.ssr.data-only'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerRouteRoute = ManagerRouteRouteImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerApprovalsRoute = ManagerApprovalsRouteImport.update({
  id: '/approvals',
  path: '/approvals',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const EmployeesViewRoute = EmployeesViewRouteImport.update({
  id: '/employees/view',
  path: '/employees/view',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeeExpensesRoute = EmployeeExpensesRouteImport.update({
  id: '/employee/expenses',
  path: '/employee/expenses',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminApprovalRulesRoute = AdminApprovalRulesRouteImport.update({
  id: '/approval-rules',
  path: '/approval-rules',
  getParentRoute: () => AdminRouteRoute,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiNamesRoute = DemoApiNamesRouteImport.update({
  id: '/demo/api/names',
  path: '/demo/api/names',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrIndexRoute = DemoStartSsrIndexRouteImport.update({
  id: '/demo/start/ssr/',
  path: '/demo/start/ssr/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrSpaModeRoute = DemoStartSsrSpaModeRouteImport.update({
  id: '/demo/start/ssr/spa-mode',
  path: '/demo/start/ssr/spa-mode',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrFullSsrRoute = DemoStartSsrFullSsrRouteImport.update({
  id: '/demo/start/ssr/full-ssr',
  path: '/demo/start/ssr/full-ssr',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrDataOnlyRoute = DemoStartSsrDataOnlyRouteImport.update({
  id: '/demo/start/ssr/data-only',
  path: '/demo/start/ssr/data-only',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/admin/approval-rules': typeof AdminApprovalRulesRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/users': typeof AdminUsersRoute
  '/employee/expenses': typeof EmployeeExpensesRoute
  '/employees/view': typeof EmployeesViewRoute
  '/manager/approvals': typeof ManagerApprovalsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/admin/approval-rules': typeof AdminApprovalRulesRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/users': typeof AdminUsersRoute
  '/employee/expenses': typeof EmployeeExpensesRoute
  '/employees/view': typeof EmployeesViewRoute
  '/manager/approvals': typeof ManagerApprovalsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/admin/approval-rules': typeof AdminApprovalRulesRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/users': typeof AdminUsersRoute
  '/employee/expenses': typeof EmployeeExpensesRoute
  '/employees/view': typeof EmployeesViewRoute
  '/manager/approvals': typeof ManagerApprovalsRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr/': typeof DemoStartSsrIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/manager'
    | '/sign-in'
    | '/sign-up'
    | '/admin/approval-rules'
    | '/admin/categories'
    | '/admin/users'
    | '/employee/expenses'
    | '/employees/view'
    | '/manager/approvals'
    | '/api/auth/$'
    | '/demo/api/names'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/manager'
    | '/sign-in'
    | '/sign-up'
    | '/admin/approval-rules'
    | '/admin/categories'
    | '/admin/users'
    | '/employee/expenses'
    | '/employees/view'
    | '/manager/approvals'
    | '/api/auth/$'
    | '/demo/api/names'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/manager'
    | '/sign-in'
    | '/sign-up'
    | '/admin/approval-rules'
    | '/admin/categories'
    | '/admin/users'
    | '/employee/expenses'
    | '/employees/view'
    | '/manager/approvals'
    | '/api/auth/$'
    | '/demo/api/names'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  ManagerRouteRoute: typeof ManagerRouteRouteWithChildren
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  EmployeeExpensesRoute: typeof EmployeeExpensesRoute
  EmployeesViewRoute: typeof EmployeesViewRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  DemoApiNamesRoute: typeof DemoApiNamesRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  DemoStartSsrDataOnlyRoute: typeof DemoStartSsrDataOnlyRoute
  DemoStartSsrFullSsrRoute: typeof DemoStartSsrFullSsrRoute
  DemoStartSsrSpaModeRoute: typeof DemoStartSsrSpaModeRoute
  DemoStartSsrIndexRoute: typeof DemoStartSsrIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/approvals': {
      id: '/manager/approvals'
      path: '/approvals'
      fullPath: '/manager/approvals'
      preLoaderRoute: typeof ManagerApprovalsRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/employees/view': {
      id: '/employees/view'
      path: '/employees/view'
      fullPath: '/employees/view'
      preLoaderRoute: typeof EmployeesViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employee/expenses': {
      id: '/employee/expenses'
      path: '/employee/expenses'
      fullPath: '/employee/expenses'
      preLoaderRoute: typeof EmployeeExpensesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/approval-rules': {
      id: '/admin/approval-rules'
      path: '/approval-rules'
      fullPath: '/admin/approval-rules'
      preLoaderRoute: typeof AdminApprovalRulesRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/names': {
      id: '/demo/api/names'
      path: '/demo/api/names'
      fullPath: '/demo/api/names'
      preLoaderRoute: typeof DemoApiNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/': {
      id: '/demo/start/ssr/'
      path: '/demo/start/ssr'
      fullPath: '/demo/start/ssr'
      preLoaderRoute: typeof DemoStartSsrIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/spa-mode': {
      id: '/demo/start/ssr/spa-mode'
      path: '/demo/start/ssr/spa-mode'
      fullPath: '/demo/start/ssr/spa-mode'
      preLoaderRoute: typeof DemoStartSsrSpaModeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/full-ssr': {
      id: '/demo/start/ssr/full-ssr'
      path: '/demo/start/ssr/full-ssr'
      fullPath: '/demo/start/ssr/full-ssr'
      preLoaderRoute: typeof DemoStartSsrFullSsrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/data-only': {
      id: '/demo/start/ssr/data-only'
      path: '/demo/start/ssr/data-only'
      fullPath: '/demo/start/ssr/data-only'
      preLoaderRoute: typeof DemoStartSsrDataOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AdminRouteRouteChildren {
  AdminApprovalRulesRoute: typeof AdminApprovalRulesRoute
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminUsersRoute: typeof AdminUsersRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminApprovalRulesRoute: AdminApprovalRulesRoute,
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminUsersRoute: AdminUsersRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface ManagerRouteRouteChildren {
  ManagerApprovalsRoute: typeof ManagerApprovalsRoute
}

const ManagerRouteRouteChildren: ManagerRouteRouteChildren = {
  ManagerApprovalsRoute: ManagerApprovalsRoute,
}

const ManagerRouteRouteWithChildren = ManagerRouteRoute._addFileChildren(
  ManagerRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  ManagerRouteRoute: ManagerRouteRouteWithChildren,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  EmployeeExpensesRoute: EmployeeExpensesRoute,
  EmployeesViewRoute: EmployeesViewRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  DemoApiNamesRoute: DemoApiNamesRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  DemoStartSsrDataOnlyRoute: DemoStartSsrDataOnlyRoute,
  DemoStartSsrFullSsrRoute: DemoStartSsrFullSsrRoute,
  DemoStartSsrSpaModeRoute: DemoStartSsrSpaModeRoute,
  DemoStartSsrIndexRoute: DemoStartSsrIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
